/// <reference types="react" />
import type { LineChartProps } from './LineChart';
/**
 * A helper function that extracts LineChartProps from the input props
 * and returns an object with props for the children components of LineChart.
 *
 * @param props The input props for LineChart
 * @returns An object with props for the children components of LineChart
 */
export declare const useLineChartProps: (props: LineChartProps) => {
    chartContainerProps: {
        series: {
            color?: string | undefined;
            area?: boolean | undefined;
            data?: (number | null)[] | undefined;
            label?: string | ((location: "tooltip" | "legend") => string) | undefined;
            id?: import("../internals").SeriesId | undefined;
            dataKey?: string | undefined;
            stackOffset?: import("..").StackOffsetType | undefined;
            valueFormatter?: import("../internals").SeriesValueFormatter<number | null> | undefined;
            highlightScope?: Partial<import("..").HighlightScope> | undefined;
            xAxisKey?: string | undefined;
            yAxisKey?: string | undefined;
            stack?: string | undefined;
            stackOrder?: import("..").StackOrderType | undefined;
            curve?: import("..").CurveType | undefined;
            showMark?: boolean | ((params: import("..").ShowMarkParams<number | Date>) => boolean) | undefined;
            disableHighlight: boolean;
            connectNulls?: boolean | undefined;
            type: "line";
        }[];
        width: number | undefined;
        height: number | undefined;
        margin: Partial<import("..").CardinalDirections<number>> | undefined;
        colors: import("..").ChartsColorPalette | undefined;
        dataset: import("../internals").DatasetType | undefined;
        xAxis: import("../internals").MakeOptional<import("..").AxisConfig<import("..").ScaleName, any, import("..").ChartsXAxisProps>, "id">[];
        yAxis: import("../internals").MakeOptional<import("..").AxisConfig<import("..").ScaleName, any, import("..").ChartsYAxisProps>, "id">[] | undefined;
        sx: import("@mui/system").SxProps<import("@mui/material").Theme> | undefined;
        highlightedItem: import("..").HighlightItemData | null | undefined;
        onHighlightChange: ((highlightedItem: import("..").HighlightItemData | null) => void) | undefined;
        disableAxisListener: boolean;
    };
    axisClickHandlerProps: {
        onAxisClick: ((event: MouseEvent, data: {
            dataIndex: number;
            axisValue?: string | number | Date | undefined;
            seriesValues: Record<string, number | null | undefined>;
        } | null) => void) | undefined;
    };
    gridProps: {
        vertical: boolean | undefined;
        horizontal: boolean | undefined;
    };
    clipPathProps: {
        id: string;
    };
    clipPathGroupProps: {
        clipPath: string;
    };
    areaPlotProps: {
        slots: import("./LineChart").LineChartSlots | undefined;
        slotProps: import("./LineChart").LineChartSlotProps | undefined;
        onAreaClick: ((event: import("react").MouseEvent<SVGElement, MouseEvent>, lineItemIdentifier: import("..").LineItemIdentifier) => void) | undefined;
        skipAnimation: boolean | undefined;
    };
    linePlotProps: {
        slots: import("./LineChart").LineChartSlots | undefined;
        slotProps: import("./LineChart").LineChartSlotProps | undefined;
        onLineClick: ((event: import("react").MouseEvent<SVGElement, MouseEvent>, lineItemIdentifier: import("..").LineItemIdentifier) => void) | undefined;
        skipAnimation: boolean | undefined;
    };
    markPlotProps: {
        slots: import("./LineChart").LineChartSlots | undefined;
        slotProps: import("./LineChart").LineChartSlotProps | undefined;
        onMarkClick: ((event: import("react").MouseEvent<SVGElement, MouseEvent>, lineItemIdentifier: import("..").LineItemIdentifier) => void) | undefined;
        skipAnimation: boolean | undefined;
    };
    overlayProps: {
        slots: import("./LineChart").LineChartSlots | undefined;
        slotProps: import("./LineChart").LineChartSlotProps | undefined;
        loading: boolean | undefined;
    };
    chartsAxisProps: {
        topAxis: string | import("..").ChartsXAxisProps | null | undefined;
        leftAxis: string | import("..").ChartsYAxisProps | null | undefined;
        rightAxis: string | import("..").ChartsYAxisProps | null | undefined;
        bottomAxis: string | import("..").ChartsXAxisProps | null | undefined;
        slots: import("./LineChart").LineChartSlots | undefined;
        slotProps: import("./LineChart").LineChartSlotProps | undefined;
    };
    axisHighlightProps: {
        x: "none" | "line" | "band";
        y?: ("none" | "line" | "band") | undefined;
    };
    lineHighlightPlotProps: {
        slots: import("./LineChart").LineChartSlots | undefined;
        slotProps: import("./LineChart").LineChartSlotProps | undefined;
    };
    legendProps: {
        slots: import("./LineChart").LineChartSlots | undefined;
        slotProps: import("./LineChart").LineChartSlotProps | undefined;
        position?: import("..").AnchorPosition | undefined;
        classes?: Partial<import("..").ChartsLegendClasses> | undefined;
        hidden?: boolean | undefined;
        direction?: import("..").Direction | undefined;
    };
    tooltipProps: {
        slots: import("./LineChart").LineChartSlots | undefined;
        slotProps: import("./LineChart").LineChartSlotProps | undefined;
        trigger?: import("../ChartsTooltip/utils").TriggerOptions | undefined;
        itemContent?: import("react").ElementType<import("..").ChartsItemContentProps<any>, keyof import("react").JSX.IntrinsicElements> | undefined;
        axisContent?: import("react").ElementType<import("..").ChartsAxisContentProps, keyof import("react").JSX.IntrinsicElements> | undefined;
        classes?: Partial<import("..").ChartsTooltipClasses> | undefined;
    };
    children: import("react").ReactNode;
};
